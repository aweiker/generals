# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2024-08-20T05:19:57+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field


class Type(Enum):
    duty = 'duty'
    sub_city = 'sub city'
    ground = 'ground'
    mounted = 'mounted'
    range = 'range'
    siege = 'siege'
    defense = 'defense'
    development = 'development'


class Attributes(BaseModel):
    class Config:
        extra = Extra.forbid

    attack: Optional[float] = Field(None, description='The attack value of the general')
    defense: Optional[float] = Field(
        None, description='The defense value of the general'
    )
    hp: Optional[float] = Field(None, description='The hit points of the general')


class Buffs(BaseModel):
    class Config:
        extra = Extra.forbid

    ground: Optional[Attributes] = Field(
        None, description='The buffs the general provides to ground troops'
    )
    mounted: Optional[Attributes] = Field(
        None, description='The buffs the general provides to mounted troops'
    )
    range: Optional[Attributes] = Field(
        None, description='The buffs the general provides to ranged troops'
    )
    siege: Optional[Attributes] = Field(
        None, description='The buffs the general provides to siege troops'
    )
    enemyGround: Optional[Attributes] = Field(
        None, description='The buffs the general provides to ground troops'
    )
    enemyMounted: Optional[Attributes] = Field(
        None, description='The buffs the general provides to mounted troops'
    )
    enemyRange: Optional[Attributes] = Field(
        None, description='The buffs the general provides to ranged troops'
    )
    enemySiege: Optional[Attributes] = Field(
        None, description='The buffs the general provides to siege troops'
    )
    monster: Optional[Attributes] = Field(
        None, description='The buffs the general provides to monsters'
    )
    marchSize: Optional[float] = Field(
        None, description='The percent increase in march size the general provides'
    )
    marchSpeed: Optional[float] = Field(
        None, description='The percent increase in march speed the general provides'
    )
    doubleDrop: Optional[float] = Field(
        None, description='Double drop rate of that the general provides'
    )
    trainingSpeed: Optional[float] = Field(
        None, description='The Subordinate Training Speed increase the general provides'
    )
    deathToSurvival: Optional[float] = Field(
        None, description='The Death into Survival Rate increase the general provides'
    )
    deathToWounded: Optional[float] = Field(
        None, description='The Death turning Wounded Rate increase the general provides'
    )


class Skill(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str = Field(..., description='The name of the skill')
    description: str = Field(
        ..., description='A description of the skill as it appears on the general'
    )
    buffs: Buffs = Field(..., description='The skill buffs the general provides')


class Skin(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str = Field(..., description='The name of the skin')
    buffs: Buffs = Field(..., description='The skin buffs the general provides')


class AscensionSkill(BaseModel):
    class Config:
        extra = Extra.forbid

    description: str = Field(
        ..., description='A description of the ascension as it appears on the general'
    )
    buffs: Buffs = Field(..., description='The asscension buffs the general provides')


class Specialty(BaseModel):
    class Config:
        extra = Extra.forbid

    title: str = Field(..., description='The name of the specialty')
    levels: List[Buffs] = Field(..., max_items=5, min_items=5)


class General(BaseModel):
    class Config:
        extra = Extra.forbid

    field_schema: Optional[str] = Field(
        None, alias='$schema', description='The reference to this schema'
    )
    name: str = Field(..., description='The name of the general')
    skill: Skill = Field(..., description='The primary skill of the general.')
    ascensions: Optional[List[AscensionSkill]] = Field(
        None,
        description='The skills the general has when ascended.',
        max_items=5,
        min_items=0,
    )
    specialties: List[Specialty] = Field(
        ..., description='The specialties the general has.', max_items=4, min_items=3
    )
    skin: Optional[Skin] = Field(None, description='The skin of the general')
    type: Type
